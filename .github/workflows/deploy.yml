name: Deploy

on:
  push:
    tags:
      - v*

  workflow_dispatch:

permissions:
  id-token: write  # Required for configure-aws-credentials to request JWT from GitHub OIDC
  contents: read

env:
  ECR_REPO_NAME: ecr0

jobs:
  deploy:
    name: Deploy to ECS Fargate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.TERRAFORM_AWS_ROLE_ARN }}
          role-session-name: github-actions-pythia-${{ github.ref_name }}-${{ github.run_id }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init and apply for ECR repository
        run: |
          cd $GITHUB_WORKSPACE/infra/ecr/
          terraform fmt
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TERRAFORM_BACKEND_BUCKET }}" \
            -backend-config="key=${{ secrets.TERRAFORM_ECR_BACKEND_KEY }}" \
            -backend-config="region=${{ secrets.AWS_REGION }}"
          cat > variables.auto.tfvars <<EOF
          repository_name = "$ECR_REPO_NAME"
          tags = {
            "pythia:Owner"       = "devops"
            "pythia:Environment" = "dev"
          }
          EOF
          terraform apply -auto-approve

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to Amazon ECR
        id: build-and-push
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO_NAME: ${{ env.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI="$REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG"
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Terraform init and apply to ECS Fargate deployment
        env:
          IMAGE_URI: ${{ steps.build-and-push.outputs.image_uri }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          cd $GITHUB_WORKSPACE/infra/
          terraform fmt
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TERRAFORM_BACKEND_BUCKET }}" \
            -backend-config="key=${{ secrets.TERRAFORM_BACKEND_KEY }}" \
            -backend-config="region=$AWS_REGION"
          cat > variables.auto.tfvars <<EOF
          aws_region          = "$AWS_REGION"
          az_count            = 2
          container_port      = 3000
          image_uri           = "$IMAGE_URI"
          app_container_name  = "pythia-app"
          tags = {
            "pythia:Owner"       = "devops"
            "pythia:Environment" = "dev"
          }
          cloudflare_api_token = "$CLOUDFLARE_API_TOKEN"
          cloudflare_zone_id   = "e5934fef29bb756740a3e348ad2d879e"
          EOF
          terraform apply -auto-approve