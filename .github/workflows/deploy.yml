name: Deploy

on:
  push:
    # branches:
    #   - deploy-to-fargate
    tags:
      - v*
    # paths: ["infra/**"]

permissions:
  id-token: write  # Required for configure-aws-credentials to request JWT from GitHub OIDC
  contents: read

env:
  ECR_REPO_NAME: ecr0

jobs:
  deploy:
    name: Deploy to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.TERRAFORM_AWS_ROLE_ARN }}
          role-session-name: github-actions-pythia-${{ github.ref_name }}-${{ github.run_id }}
          aws-region: ${{ secrets.AWS_REGION }}

      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v3

      # - name: Terraform init and apply for infra (Phase 1)
      #   run: |
      #     cd infra
      #     terraform fmt
      #     terraform init \
      #       -backend-config="bucket=${{ secrets.TERRAFORM_BACKEND_BUCKET }}" \
      #       -backend-config="key=${{ secrets.TERRAFORM_BACKEND_KEY }}" \
      #       -backend-config="region=${{ secrets.AWS_REGION }}"
      #     cat > variables.auto.tfvars <<EOF
      #     ecr_repository_name = "$ECR_REPO_NAME"
      #     environment = "dev"
      #     tag_prefix = "pythia"
      #     az_count = 2
      #     container_port = 3000
      #     EOF
      #     terraform apply -auto-approve

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG .
          docker push $REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG

      - name: Output ECR image URI
        id: ecr-image-uri
        run: echo "ECR_IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${ECR_REPO_NAME}:${{ github.sha }}" >> $GITHUB_OUTPUT

      # - name: Terraform apply to deploy (Phase 2)
      #   env:
      #     IMAGE_URI: "${{ env.ECR_REPO_URI }}@${{ steps.digest.outputs.digest }}"
      #   run: terraform apply -auto-approve -var="image_uri=$IMAGE_URI"